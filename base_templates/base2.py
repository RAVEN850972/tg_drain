import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlalchemy import select, func, desc
from db import Session
from models import NFTGift, UserGiftHistory, WorkerBotUser, WorkerBot
import random
import asyncio

class BaseTemplate2:
    id = "base_2"
    name = "NFT-–†—É–ª–µ—Ç–∫–∞"
    photo_url = "https://i.postimg.cc/nzRckXjc/photo-2025-07-28-06-35-23.jpg"
    video_path = None
    after_start = (
        "üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "‚ú® –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ <b>1 –í—Ä–∞—â–µ–Ω–∏–µ!</b> ‚ú®\n"
        "‚ú® –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏!\n"
        "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        "<code>{ref_link}</code>\n\n"
        "<b>–ß—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å?</b>\n"
        "1Ô∏è‚É£ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ NFT-–ø–æ–¥–∞—Ä–∫–∏\n"
        "3Ô∏è‚É£ –í—ã–≤–æ–¥–∏—Ç—å –∏—Ö –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n"
        "<b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –í–´–ò–ì–†–ê–¢–¨!</b>"
    )

    @classmethod
    def get_reply_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É", callback_data="nft_spin")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="nft_help")],
            [InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="nft_inventory")]
        ])

    @classmethod
    def get_nft_markup(cls, label, back_callback="custom_back"):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üç¨ –í—ã–≤–µ—Å—Ç–∏ {label}", callback_data=f"nft_withdraw_{label}")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=back_callback)]
            ]
        )

    @classmethod
    def get_back_markup(cls):
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="custom_back")]]
        )

    @staticmethod
    async def get_bot_username(bot):
        return (await bot.get_me()).username

    @staticmethod
    async def get_worker_bot_and_user(session, bot_username, telegram_id):
        worker_bot = await session.scalar(select(WorkerBot).where(WorkerBot.username == bot_username))
        if not worker_bot:
            return None, None
        user = await session.scalar(
            select(WorkerBotUser).where(
                WorkerBotUser.telegram_id == telegram_id,
                WorkerBotUser.worker_bot_id == worker_bot.id
            )
        )
        return worker_bot, user

    @staticmethod
    async def get_last_spin_time(user_id, worker_bot_id, session):
        gift = await session.scalar(
            select(UserGiftHistory)
            .where(
                UserGiftHistory.user_id == user_id,
                UserGiftHistory.worker_bot_id == worker_bot_id
            )
            .order_by(desc(UserGiftHistory.won_at))
        )
        if gift and getattr(gift, "won_at", None):
            return gift.won_at
        return None

    @staticmethod
    async def can_spin_gift(user_id, worker_bot_id, session, minutes=30):
        last_spin_time = await BaseTemplate2.get_last_spin_time(user_id, worker_bot_id, session)
        if last_spin_time is None:
            return True, None
        now = datetime.datetime.now(datetime.timezone.utc)
        if last_spin_time.tzinfo is None:
            last_spin_time = last_spin_time.replace(tzinfo=datetime.timezone.utc)
        diff = (now - last_spin_time).total_seconds()
        if diff >= minutes * 60:
            return True, None
        wait_minutes = int((minutes * 60 - diff) // 60) + 1
        return False, wait_minutes

    @staticmethod
    async def process_callback(callback, bot, chat_id):
        data = callback.data
        bot_username = await BaseTemplate2.get_bot_username(bot)

        # –í—ã–≤–æ–¥–∏—Ç—å NFT
        if data.startswith("nft_withdraw_"):
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            text = (
                "<b>üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
                "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É</b>\n"
                f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª\n"
                f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
                "<b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.</b>"
            )
            await bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=BaseTemplate2.get_back_markup()
            )
            return

        # –†—É–ª–µ—Ç–∫–∞
        if data == "nft_spin":
            is_premium = getattr(callback.from_user, "is_premium", False)
            if not is_premium:
                await bot.answer_callback_query(
                    callback.id,
                    text="–í—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ Telegram Premium.\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å Telegram Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—Ä–∞—â–µ–Ω–∏–µ!",
                    show_alert=True
                )
                return

            telegram_id = callback.from_user.id
            async with Session() as session:
                worker_bot, user = await BaseTemplate2.get_worker_bot_and_user(session, bot_username, telegram_id)
                if not worker_bot:
                    try: await bot.delete_message(chat_id, callback.message.message_id)
                    except: pass
                    await bot.send_message(chat_id, "‚ùå –í–æ—Ä–∫–µ—Ä-–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return
                if not user:
                    try: await bot.delete_message(chat_id, callback.message.message_id)
                    except: pass
                    await bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                    return

                can_spin, wait_minutes = await BaseTemplate2.can_spin_gift(user.id, worker_bot.id, session)
                if not can_spin:
                    await bot.answer_callback_query(
                        callback.id,
                        text="–¢—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª —Ä—É–ª–µ—Ç–∫—É —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!",
                        show_alert=True
                    )
                    return

            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass

            msg = await bot.send_message(chat_id, "üé∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É...")
            await asyncio.sleep(1)
            await bot.edit_message_text(
                text="üîÑ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...",
                chat_id=chat_id,
                message_id=msg.message_id
            )
            await asyncio.sleep(1)
            await bot.edit_message_text(
                text="‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
                chat_id=chat_id,
                message_id=msg.message_id
            )
            await asyncio.sleep(1)

            emoji_msg = await bot.send_message(chat_id, "üéâ")
            await asyncio.sleep(2)
            try:
                await bot.delete_message(chat_id, emoji_msg.message_id)
            except Exception:
                pass

            async with Session() as session:
                worker_bot, user = await BaseTemplate2.get_worker_bot_and_user(session, bot_username, telegram_id)
                nft_url = await session.scalar(select(NFTGift.url).order_by(func.random()))
                if not nft_url:
                    await bot.edit_message_text(
                        text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö NFT.",
                        chat_id=chat_id,
                        message_id=msg.message_id
                    )
                    return
                nft_name = nft_url.rstrip("/").split("/")[-1]

                # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞!
                gift = UserGiftHistory(
                    user_id=user.id,
                    worker_bot_id=worker_bot.id,
                    gift_slug=nft_name,
                    gift_url=nft_url
                )
                session.add(gift)
                await session.commit()

            text = f"<b>üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª: <a href='{nft_url}'>{nft_name}</a></b>"
            await bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=msg.message_id,
                parse_mode="HTML",
                reply_markup=BaseTemplate2.get_nft_markup(nft_name)
            )

        # –ü–æ–º–æ—â—å
        elif data == "nft_help":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            text = (
                "<b>üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª\n\n"
                "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É</b>\n"
                f"‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ß–∞—Ç-–±–æ—Ç—ã¬ª\n"
                f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <code>@{bot_username}</code> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
                "<b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.</b>"
            )
            await bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=BaseTemplate2.get_back_markup()
            )

        # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        elif data == "nft_inventory":
            telegram_id = callback.from_user.id
            async with Session() as session:
                worker_bot, user = await BaseTemplate2.get_worker_bot_and_user(session, bot_username, telegram_id)
                try: await bot.delete_message(chat_id, callback.message.message_id)
                except: pass

                if not worker_bot or not user:
                    await bot.send_message(
                        chat_id,
                        "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.",
                        reply_markup=BaseTemplate2.get_back_markup()  
                    )
                    return

                gift = await session.scalar(
                    select(UserGiftHistory)
                    .where(UserGiftHistory.user_id == user.id, UserGiftHistory.worker_bot_id == worker_bot.id)
                    .order_by(desc(UserGiftHistory.won_at))
                )
                if not gift:
                    await bot.send_message(
                        chat_id,
                        "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.",
                        reply_markup=BaseTemplate2.get_back_markup() 
                    )
                else:
                    msg = (
                        f"üì¶ <b>–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n"
                        f"- <a href=\"{gift.gift_url}\">{gift.gift_slug}</a>\n"
                    )
                    await bot.send_message(
                        chat_id,
                        msg,
                        parse_mode="HTML",
                        reply_markup=BaseTemplate2.get_nft_markup(gift.gift_slug)
                    )

        # –ù–∞–∑–∞–¥
        elif data == "custom_back":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            bot_username = await BaseTemplate2.get_bot_username(bot)
            user_id = callback.from_user.id
            referral_link = f"https://t.me/{bot_username}?start={user_id}"
            text = BaseTemplate2.after_start.format(ref_link=referral_link)
            await bot.send_photo(
                chat_id=chat_id,
                photo=BaseTemplate2.photo_url,
                caption=text,
                parse_mode="HTML",
                reply_markup=BaseTemplate2.get_reply_markup()
            )
        else:
            await bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    @staticmethod
    async def handle_base2_message(message: Message, bot):
        bot_username = await BaseTemplate2.get_bot_username(bot)
        user_id = message.from_user.id
        referral_link = f"https://t.me/{bot_username}?start={user_id}"

        text = BaseTemplate2.after_start.format(ref_link=referral_link)

        await bot.send_photo(
            chat_id=message.chat.id,
            photo=BaseTemplate2.photo_url,
            caption=text,
            parse_mode="HTML",
            reply_markup=BaseTemplate2.get_reply_markup()
        )