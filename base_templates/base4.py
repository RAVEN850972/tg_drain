from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

class BaseTemplate4:
    id = "base_4"
    name = "Stars-–†—É–ª–µ—Ç–∫–∞"
    photo_url = "https://i.postimg.cc/5yHXZBLR/photo-2025-07-28-07-47-25.jpg"
    video_path = None

    after_start = (
        "üéâ <b>–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!</b>\n\n"
        "–ß—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É, –∑–∞–±–∏—Ä–∞—Ç—å –ø—Ä–∏–∑—ã\n"
        "–∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã ‚Äî <b>–Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</b>.\n\n"
        "‚ûñ –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b> –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ –±–æ—Ç–µ.\n\n"
        "‚ûñ –ü–æ—Å–ª–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
        "  ‚Ä¢ <b>üéÅ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî 150 ‚≠êÔ∏è</b>\n"
        "  ‚Ä¢ <b>–î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ –∏ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Ä—É–ª–µ—Ç–∫–∏!</b>\n\n"
        "‚è±Ô∏è <i>–≠—Ç–æ –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã, –Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–∞–Ω–∞!</i>"
    )

    @classmethod
    def get_reply_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="base4_spin")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="base4_help")],
        ])

    @classmethod
    def get_help_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="base4_back")]
        ])

    @staticmethod
    async def process_callback(callback, bot, chat_id):
        data = callback.data
        bot_username = (await bot.get_me()).username

        if data == "base4_spin":
            # –¢–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç!
            await bot.answer_callback_query(callback.id, text="–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!", show_alert=True)
            return

        if data == "base4_help":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            text = (
                "<b>üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:</b>\n\n"
                "1Ô∏è‚É£ <b>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª</b>\n"
                f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@{bot_username}</code> –≤ –ß–∞—Ç-–±–æ—Ç—ã\n"
                "4Ô∏è‚É£ –í—ã–¥–∞–π—Ç–µ <b>–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b> –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏."
            )
            await bot.send_message(
                chat_id, text, parse_mode="HTML",
                reply_markup=BaseTemplate4.get_help_markup()
            )
            return

        if data == "base4_back":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            await bot.send_photo(
                chat_id=chat_id,
                photo=BaseTemplate4.photo_url,
                caption=BaseTemplate4.after_start,
                parse_mode="HTML",
                reply_markup=BaseTemplate4.get_reply_markup()
            )
            return

        await bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    @staticmethod
    async def handle_base4_message(message: Message, bot):
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=BaseTemplate4.photo_url,
            caption=BaseTemplate4.after_start,
            parse_mode="HTML",
            reply_markup=BaseTemplate4.get_reply_markup()
        )