from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, WebAppInfo
from sqlalchemy import select
from db import Session
from models import WorkerBot, WorkerBotUser

pending_withdraw = {}  

class BaseTemplate6:
    id = "base_6"
    name = "Send Stars"

    STAR_PRICE = 0.015  

    after_start = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Send Stars!</b>\n\n"
        "ü§ñ –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )

    photo_url = "https://i.postimg.cc/fTfF5TGL/menu.png"
    balance_photo_url = "https://i.postimg.cc/MpZLLJwY/balance.png"
    deposit_photo_url = "https://i.postimg.cc/tJDKsSky/photo-2025-08-08-21-08-26.jpg"
    withdraw_photo_url = "https://i.postimg.cc/zGdQZ2XY/stars.png"
    faq_photo_url = "https://i.postimg.cc/J4LvbBdv/faq.png"
    check_photo_url = "https://i.postimg.cc/tJDKsSky/photo-2025-08-08-21-08-26.jpg"

    @classmethod
    def get_reply_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠ê –ë–∞–ª–∞–Ω—Å", callback_data="stars_balance"),
                InlineKeyboardButton(text="üí∞ –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="stars_deposit"),
            ],
            [
                InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="stars_withdraw"),
            ],
            [
                InlineKeyboardButton(text="üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="earn_stars"),
            ],
        ])

    @classmethod
    def get_back_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="stars_back")]
        ])

    @classmethod
    def get_open_menu_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å", callback_data="stars_back")]
        ])

    @staticmethod
    async def _delete_prev_message(callback, bot, chat_id):
        try:
            await bot.delete_message(chat_id, callback.message.message_id)
        except Exception:
            pass

    @staticmethod
    async def _send_screen(bot, chat_id: int, text: str, reply_markup=None, photo_url: str | None = None):
        if photo_url:
            await bot.send_photo(chat_id, photo_url, caption=text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)

    @staticmethod
    async def _load_user_and_bot(bot, user_id: int):
        async with Session() as session:
            me = await bot.get_me()
            worker_bot = await session.scalar(
                select(WorkerBot).where(WorkerBot.username == me.username)
            )
            if not worker_bot:
                return session, None, None
            user_obj = await session.scalar(
                select(WorkerBotUser).where(
                    WorkerBotUser.telegram_id == user_id,
                    WorkerBotUser.worker_bot_id == worker_bot.id
                )
            )
            return session, worker_bot, user_obj

    @staticmethod
    async def process_callback(callback, bot, chat_id):
        data = callback.data
        await BaseTemplate6._delete_prev_message(callback, bot, chat_id)

        if data == "stars_balance":
            session, _, user_obj = await BaseTemplate6._load_user_and_bot(bot, callback.from_user.id)
            stars = user_obj.stars_balance if user_obj and user_obj.stars_balance else 0
            usd = stars * BaseTemplate6.STAR_PRICE
            await BaseTemplate6._send_screen(
                bot, chat_id,
                f"<b>‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å:</b>\n\n‚ö°Ô∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{stars}</b> ‚≠êÔ∏è <b>(${usd:.2f})</b>",
                BaseTemplate6.get_back_markup(),
                BaseTemplate6.balance_photo_url
            )

        elif data == "stars_deposit":
            bot_username = (await bot.get_me()).username
            await BaseTemplate6._send_screen(
                bot, chat_id,
                "‚ö†Ô∏è <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>\n\n"
                "<b>üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1Ô∏è‚É£ <b>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª</b>\n"
                f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@{bot_username}</code> –≤ –ß–∞—Ç-–±–æ—Ç—ã\n"
                "4Ô∏è‚É£ –í—ã–¥–∞–π—Ç–µ <b>–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b> –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.",
                BaseTemplate6.get_back_markup(),
                BaseTemplate6.deposit_photo_url
            )

        elif data == "stars_withdraw":
            session, _, user_obj = await BaseTemplate6._load_user_and_bot(bot, callback.from_user.id)
            stars = user_obj.stars_balance if user_obj and user_obj.stars_balance else 0
            pending_withdraw[callback.from_user.id] = True
            await BaseTemplate6._send_screen(
                bot, chat_id,
                f"üìÆ –†–∞–∑–¥–µ–ª ¬´–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥¬ª\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{stars}</b> ‚≠êÔ∏è\n"
                f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É ‚Äî –æ—Ç <b>25</b> –∑–≤—ë–∑–¥ –∏ –≤—ã—à–µ.",
                BaseTemplate6.get_back_markup(),
                BaseTemplate6.withdraw_photo_url
            )

        elif data == "stars_faq":
            await BaseTemplate6._send_screen(
                bot, chat_id,
                "‚ùì <b>FAQ</b>\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
                BaseTemplate6.get_back_markup(),
                BaseTemplate6.faq_photo_url
            )

        elif data == "earn_stars":
            bot_username = (await bot.get_me()).username
            telegram_id = callback.from_user.id
            ref_link = f"https://t.me/{bot_username}?start={telegram_id}"
            await BaseTemplate6._send_screen(
                bot, chat_id,
                f"üíµ <b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n\n"
                f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>+5 ‚≠êÔ∏è</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
                f"üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n"
                f"<code>{ref_link}</code>\n\n"
                f"üë• –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —á–∞—Ç–∞—Ö, —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã, "
                f"–∫–æ–≥–¥–∞ –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è!",
                BaseTemplate6.get_back_markup(),
                BaseTemplate6.photo_url
            )

        elif data == "stars_back":
            await BaseTemplate6._send_screen(
                bot, chat_id,
                BaseTemplate6.after_start,
                BaseTemplate6.get_reply_markup(),
                BaseTemplate6.photo_url
            )

        else:
            await BaseTemplate6._send_screen(
                bot, chat_id,
                BaseTemplate6.after_start,
                BaseTemplate6.get_reply_markup(),
                BaseTemplate6.photo_url
            )

    @staticmethod
    async def handle_text_input(message: Message, bot):
        user_id = message.from_user.id
        if user_id in pending_withdraw:
            bot_username = (await bot.get_me()).username
            pending_withdraw.pop(user_id, None)
            await bot.send_message(
                message.chat.id,
                "‚ùå –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥ –±—ã–ª <b>–û–¢–ú–ï–ù–Å–ù.</b>\n\n"
                "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥ –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
                "<b>üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1Ô∏è‚É£ <b>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª</b>\n"
                f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@{bot_username}</code> –≤ –ß–∞—Ç-–±–æ—Ç—ã\n"
                "4Ô∏è‚É£ –í—ã–¥–∞–π—Ç–µ <b>–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b> –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.",
                parse_mode="HTML"
            )

    @staticmethod
    async def handle_base6_message(message: Message, bot):
        await BaseTemplate6._send_screen(
            bot, message.chat.id,
            BaseTemplate6.after_start,
            BaseTemplate6.get_reply_markup(),
            BaseTemplate6.photo_url
        )

    @staticmethod
    def get_check_activated_text(stars_amount: int) -> str:
        price_usd = stars_amount * BaseTemplate6.STAR_PRICE
        return f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{stars_amount}</b> ‚≠êÔ∏è <b>(${price_usd:.2f}).</b>"

    @staticmethod
    async def send_check_activated(bot, chat_id: int, stars_amount: int):
        text = BaseTemplate6.get_check_activated_text(stars_amount)
        await bot.send_photo(
            chat_id,
            BaseTemplate6.check_photo_url,
            caption=text,
            parse_mode="HTML",
            reply_markup=BaseTemplate6.get_open_menu_markup()
        )