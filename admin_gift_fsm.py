from db import Session
from models import Admin, WorkerBot
from sqlalchemy import select
from sqlalchemy.orm import selectinload
import asyncio

user_fsm_states = {}
user_fsm_data = {}

async def is_admin_for_worker(bot_token, user_id):
    async with Session() as session:
        worker_bot = await session.scalar(
            select(WorkerBot)
            .where(WorkerBot.token == bot_token)
            .options(selectinload(WorkerBot.owner))
        )
        if not worker_bot or not worker_bot.owner:
            return False
        return worker_bot.owner.telegram_id == user_id

async def handle_gift_fsm(message, bot, bot_token):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_fsm_states.get(user_id)

    if text == "/start":
        user_fsm_states.pop(user_id, None)
        user_fsm_data.pop(user_id, None)
        return False

    if text == "/gift":
        if not await is_admin_for_worker(bot_token, user_id):
            await bot.send_message(user_id, "<b>–¢—ã –Ω–µ –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ –±–æ—Ç–∞.</b>", parse_mode="HTML")
            return True
        user_fsm_states[user_id] = "waiting_user_id"
        await bot.send_message(
            user_id,
            "<b>–í–≤–µ–¥–∏ Telegram ID(—ã) (–¥–æ 20 —à—Ç—É–∫, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):</b>\n"
            "<i>–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1002742402019)</i>",
            parse_mode="HTML"
        )
        return True

    if state == "waiting_user_id":
        ids = text.replace(",", " ").replace("\n", " ").split()
        if not all(i.lstrip("-").isdigit() for i in ids):
            await bot.send_message(user_id, "<b>–í—Å–µ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. /start –¥–ª—è –≤—ã—Ö–æ–¥–∞.</b>", parse_mode="HTML")
            user_fsm_states.pop(user_id, None)
            user_fsm_data.pop(user_id, None)
            return True
        if len(ids) > 20:
            await bot.send_message(user_id, "<b>–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 20 ID –∑–∞ —Ä–∞–∑. /start –¥–ª—è –≤—ã—Ö–æ–¥–∞.</b>", parse_mode="HTML")
            user_fsm_states.pop(user_id, None)
            user_fsm_data.pop(user_id, None)
            return True
        user_fsm_data[user_id] = {"user_ids": [int(i) for i in ids]}
        user_fsm_states[user_id] = "waiting_gift_id"

        gift_examples = (
            "<b>–í–≤–µ–¥–∏ gift_id:</b>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "üíù - <code>5170145012310081615</code>\n"
            "üß∏ - <code>5170233102089322756</code>\n"
            "üéÅ - <code>5170250947678437525</code>\n"
            "üåπ - <code>5168103777563050263</code>\n"
            "üéÇ - <code>5170144170496491616</code>\n"
            "üíê - <code>5170314324215857265</code>\n"
            "üöÄ - <code>5170564780938756245</code>\n"
            "üèÜ - <code>5168043875654172773</code>\n"
            "üíç - <code>5170690322832818290</code>\n"
            "üíé - <code>5170521118301225164</code>\n"
            "üçæ - <code>6028601630662853006</code>"
        )
        await bot.send_message(user_id, gift_examples, parse_mode="HTML")
        return True

    if state == "waiting_gift_id":
        user_fsm_data[user_id]["gift_id"] = text
        user_fsm_states[user_id] = "waiting_gift_text"
        await bot.send_message(user_id, "<b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ (–¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤):</b>", parse_mode="HTML")
        return True

    if state == "waiting_gift_text":
        if len(text) > 128:
            await bot.send_message(user_id, "<b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 128 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:</b>", parse_mode="HTML")
            return True

        data = user_fsm_data[user_id]
        gift_text = text or "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéÅ"
        user_ids = data["user_ids"]
        gift_id = data["gift_id"]

        async def send_one(uid):
            try:
                kwargs = dict(gift_id=gift_id, text=gift_text)
                if str(uid).startswith("-100") or (isinstance(uid, int) and uid < 0):
                    kwargs["chat_id"] = uid
                else:
                    kwargs["user_id"] = uid
                res = await bot.send_gift(**kwargs)
                return res is True
            except Exception as e:
                if "BALANCE_TOO_LOW" in str(e):
                    raise RuntimeError("BALANCE_TOO_LOW")
                print(f"[SEND_GIFT_ERROR] {uid}: {repr(e)}")
                return False

        try:
            results = await asyncio.gather(*[send_one(uid) for uid in user_ids])
            ok = sum(results)
            fail = len(user_ids) - ok

            await bot.send_message(
                user_id,
                f"<b>–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{ok}</b>\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: <b>{fail}</b>",
                parse_mode="HTML"
            )
        except RuntimeError as e:
            if str(e) == "BALANCE_TOO_LOW":
                await bot.send_message(user_id, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.</b>", parse_mode="HTML")
        finally:
            user_fsm_states.pop(user_id, None)
            user_fsm_data.pop(user_id, None)

        return True

    if state:
        await bot.send_message(user_id, "<b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start</b>", parse_mode="HTML")
        user_fsm_states.pop(user_id, None)
        user_fsm_data.pop(user_id, None)
        return True

    return False